#! /bin/bash -x

lcolour () {
    local colour_="[1;${1}m" no_colour_="[0m"
    local text_="$@"
    printf "$colour_$text_$no_colour_"
}

lred () {
    lcolour 31 "$@"
}

lgreen () {
    lcolour 32 "$@"
}

lblue () {
    lcolour 34 "$@"
}

lwhite () {
    lcolour 37 "$@"
}

lred_user () {
    local _colour_username=$(lblue "${USER:-$(whoami)}")
    local _colour_host=$(lred ${HOSTNAME:-$(hostname -s)})
    echo "${_colour_username}@$_colour_host"
}

bashrc_log=~/log/bashrc.log
jab_clone=~/jalanb/jab
local_init=$jab_clone/local/__init__.sh

vbb () {
    (
        cd $jab_clone
        local local_= log_=
        [[ -f $local_init ]] && local_=$local_init
        [[ -f $bashrc_log ]] && log_=$bashrc_log
        local files_=" "\
            "~/.bashrc "\
            "__init__.sh "\
            "environ.d/__init__.sh "\
            "src/bash/__init__.sh "\
            "$local_ "\
            "~/.vimrc "\
            "$log_ "\
            "$@"
        vim -p $files_
        readlink -f $files_
    )
}

echo_path () {
    echo "PATH is $(echo $PATH | sed -e "s,:,:    ,g" | tr ':' '\n')"
    echo "PSI is $PS1"
    echo "Here is $(readlink -f .)"
}

set_path_ () {
    local clone_="$1"; shift
    local homes_="${clone_}/bin:${HOME}/bin:${HOME}/.local"
    local local_="/usr/local/gnu:/usr/local/bin:/usr/local/go/bin"
    local ubins_="/usr/bin:/bin"
    local sbins_="/usr/sbin:/sbin"  # unused, for reference only

    local paths_="$homes_:$local_:$ubins_"
    PATH="$paths_"
    export PATH
}

set_pythonpath_ () {
    local clone_="$1"; shift
    local mysite_="${clone_}/src/python/site/"
    [[ -d $mysite_ ]] || return
    local site_=$mysite_
    [[ $PYTHONPATH ]] && site_="$site_:$PYTHONPATH"
    [[ $site_ ]] || return 1
    PYTHONPATH="$site_"
    export PYTHONPATH
}

set_library_path_ () {
    local lib_path_=
    if [[ -d $HOME/lib && $lib_path_ ]]; then
        if find $HOME/lib -maxdepth 1 -name 'libpython*' -quit ; then
            lib_path_="$HOME/lib"
            [[ $LD_LIBRARY_PATH ]] && lib_path_="$lib_path_:$LD_LIBRARY_PATH"
        fi
    fi
    [[ $lib_path_ ]] || return 1
    LD_LIBRARY_PATH="$lib_path_" 
    export LD_LIBRARY_PATH
}

set_paths_ () {
    set_path_ "$@"
    set_pythonpath_ "$@"
    set_library_path_
}

pre_bashrc_ () {
    set_paths_ "$@"
}

bashrc_ () {
    # echo_path
    # /usr/bin/say -v Anna Ich mÃ¶chte eine Maschine, die schreiben kann, wie ich kann &
    export PS1="\$? [$(lred_user)@\h:\$PWD]\n$ "
    local init_=$jab_clone/__init__.sh 
    [[ -f $init_ ]] || return 1
    source $init_
    [[ -f $local_init ]] && source $local_init
    sp green
}

__main__ () {
    pre_bashrc_ $jab_clone
    bashrc_ $jab_clone
    set +m
}

[[ $- =~ i ]] && __main__  "$@" #  > $bashrc_log 2>&1
